Installations needed:
Node, Yarn

What is React ?
It is a LIBRARY for developing client side applications
(HTML + CSS + JS/Typescript)

Other popular:
Framework: Angular 
Libraries: Vue, Svelt


Framework: Provides a whole ecosystem and an active environment for the development
Library: It servers a specific purpose and for other functionalities, we needed to develope/get
the developed plugins.

They are used especially to build SPA: Single Page applications
Benefits: ??
> All UI code is dumped to client in first hit and post that all interactions
happen via ajax calls. Data is pulled in and UI is updated and accordingly

Why frameworks or libraries:
> DOM: To prevent low level handlings and get things done in an easy way without
having concerns about most of the things.
> Browser Compatibility: using babel
> Performance: Bundling, Lazyloading and other features (webpack - module builder)
> Modularity, Reusability etc
> Component based development: (login,cart,productlist,payment,shipping) promotes Modularity, Reusability and many more
advantages. Component = UI + operation logic + Model

Javascript
> A scripting language that runs in the browser (paint HTML + CSS)
> Browser provides the run time environment for Javascript
> JS Engines: Chrome: V8, Firefox: SpiderMonkey, IE: Chakra

European Computer Manufacturer's Association: ECMA
> They maintain and come up with the specification standards for scripting languages (Javascript)
> This specifications are implemented by the different vendor JS Engines

Which version of JS should i use then ?
> Ideally, that which is supported by all engines.
> But, we can have a transpiler that can convert the code we write in par with
latest standards and compile it as per Compatibility. 
Solution: Babel (https://babeljs.io)
> React makes use of babel


Node:
> Runtime environment based on V8.
> A wrapper was written on the Chrome's V8 engine.
> This made it possible to run the Javascript outside the browser.

Sync/Async Programming:
> Sync: blocking, Async: Non-blocking
> async and await keywords to make functions return promise types using which
we can implement or handle the synchronisity of function calls.

npm: 
Node Package manager
https://npmjs.com
> We generally place executables and some cli tools in global paths.
> Project level libraries or dependencies are placed in project specific 
node modules folder.
> We initialise the node project using npm init command after which a depenndencies
file : package.json is created.

yarn:
> Package manager: Manage dependencies (By FaceBook)
> npm has some security vulnerabilities according to Fb, so for react applications
we use yarn

nodemon:
> Good support package when developing react/node modules
> Automatically refreshes the code changes upon saving the js files.

React -> Can be written in : JS or Typescript

Typescript:
Type support added to JS. 
With the help of it, Code is maintainable and more reliable
For browser to interpret TypeScript, we need transpiler
Transpiler(src in .ts) -----> src in .js
npm i -g Typescript
tsc --version
tsc <filename.ts>, tsc --target ES6 <filename.ts>

React:
Install React CLI : create-react-app
> npm i -g create-react-app
> create-react-app firstapp

>npx create-react-app firstapp

> One way to use React is keep going on creating React Elements and then
adding them to ReactDOM one after other. But this gets cumbersome as and then
we work on complex UI
So, JSX

JSX: Javascript Extension (syntactic. sugar)

React Components:
> Segregated, Reusable UI modules written for rendering
> Composition of React elements

Different ways to create Components:
Earlier:
>Stateful: Classes
>Stateless: Functions

But now, both are equally potent.

Creating an app with typescript support:
npx create-react-app --template=typescript reacttypepro


React Router:
No router by default, so we need to add a package: react-router-DOM
yarn add react-router-dom or npm i react-router-dom

React Event handling:
We can create reference variables and associate them to the input elements present in a form.
During the event handling, we can then access the specific values 

example: 
creating ref: let v = React.createRef();
accessing value: v.current.value
associating to input: <input ref={v} />

State Management:
Whenever model changes, view should also get updated.

Lifecycle methods:
class components:
function components:

Component Interaction:
parent -> child
child -> parent
sibling -> sibling

useContext(), createContext() - multilevel communication across components
